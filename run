#!/bin/bash

if [[ $# -eq 0 ]]
   then
      make clean
      make
      for file in benchmarks/*/*.mini
         do
            java MiniCompiler -llvm -stack $file && y=${file%.*}
            clang -m32 "$y.ll" ast/util.c
            par=$(dirname "$file")
            echo "======= $file stack-based ======="
            ./a.out < "$par/input" > "$y.myoutStack"
            diff "$y.myoutStack" "$par/output"
            echo "======= $file longer stack-based ======="
            ./a.out < "$par/input.longer" > "$y.mylongerStack"
            diff "$y.mylongerStack" "$par/output.longer"
            #java MiniCompiler $file
            #clang -m32 "$y_ssa.ll" ast/util.c
            #echo "======= $file register-based ======="
            #./a.out < "$par/input" > "$y.myoutReg"
            #diff "$y.myoutReg" "$par/output"
            #echo "======= $file longer register-based ======="
            #./a.out < "$par/input.longer" > "$y.mylongerReg"
            #diff "$y.mylongerReg" "$par/output.longer"
      done
elif [[ $# -eq 1 ]]
   then
      if [[ $1 = "-noC" ]]
         then
            for file in benchmarks/*/*.mini
               do
                  java MiniCompiler -stack $file && y=${file%.*}
                  clang -m32 "$y.ll" ast/util.c
                  par=$(dirname "$file")
                  echo "======= $file stack-based ======="
                  ./a.out < "$par/input" > "$y.myoutStack"
                  diff "$y.myoutStack" "$par/output"
                  echo "======= $file longer stack-based ======="
                  ./a.out < "$par/input.longer" > "$y.mylongerStack"
                  diff "$y.mylongerStack" "$par/output.longer"
                  java MiniCompiler $file
                  clang -m32 "$y_ssa.ll" ast.util.c
                  echo "======= $file register-based ======="
                  ./a.out < "$par/input" > "$y.myoutReg"
                  diff "$y.myoutReg" "$par/output"
                  echo "======= $file longer register-based ======="
                  ./a.out < "$par/input.longer" > "$y.mylongerReg"
                  diff "$y.mylongerReg" "$par/output.longer"
            done
      elif [[ $1 = "-stack" ]]
         then
            make clean
            make
            for file in benchmarks/*/*.mini
               do
                  java MiniCompiler -stack $file && y=${file%.*}
                  clang -m32 "$y.ll" ast/util.c
                  par=$(dirname "$file")
                  echo "======= $file stack-based ======="
                  ./a.out < "$par/input" > "$y.myoutStack"
                  diff "$y.myoutStack" "$par/output"
                  echo "======= $file longer stack-based ======="
                  ./a.out < "$par/input.longer" > "$y.mylongerStack"
                  diff "$y.mylongerStack" "$par/output.longer"
            done
      else
         echo "Error: $1 is not a valid option"
         echo "Usage: ./run [opt: -noC] [opt: -stack]"
      fi
elif [[ $# -eq 2 ]]
   then
      if [[ $1 = "-noC" ]]
         then
            if [[ $2 = "-stack" ]]
               then
                  for file in benchmarks/*/*.mini
                     do
                        java MiniCompiler -stack $file && y=${file%.*}
                        clang -m32 "$y.ll" ast/util.c
                        par=$(dirname "$file")
                        echo "======= $file stack-based ======="
                        ./a.out < "$par/input" > "$y.myoutStack"
                        diff "$y.myoutStack" "$par/output"
                        echo "======= $file longer stack-based ======="
                        ./a.out < "$par/input.longer" > "$y.mylongerStack"
                        diff "$y.mylongerStack" "$par/output.longer"
                  done
            else
               echo "Error: $2 is not a valid option"
               echo "Usage: ./run [opt: -noC] [opt: -stack]"
            fi
      elif [[ $1 = "-stack" ]]
         then
            if [[ $2 = "-noC" ]]
               then
                  for file in benchmarks/*/*.mini
                     do
                        java MiniCompiler -stack $file && y=${file%.*}
                        clang -m32 "$y.ll" ast/util.c
                        par=$(dirname "$file")
                        echo "======= $file stack-based ======="
                        ./a.out < "$par/input" > "$y.myoutStack"
                        diff "$y.myoutStack" "$par/output"
                        echo "======= $file longer stack-based ======="
                        ./a.out < "$par/input.longer" > "$y.mylongerStack"
                        diff "$y.mylongerStack" "$par/output.longer"
                  done
            else
               echo "Error: $2 is not a valid option"
               echo "Usage: ./run [opt: -noC] [opt: -stack]"
            fi
      else
         echo "Error: $1 is not a valid option"
         echo "Usage: ./run [opt: -noC] [opt: -stack]"
      fi
else
   echo "Error: Too many arguments"
   echo "Usage: ./run [opt: -noC] [opt: -stack]"
fi
